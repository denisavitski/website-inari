---
import Button from '@elements/Button.astro'
import LocationButton from '@elements/LocationButton.astro'
import Map from '@elements/Map.astro'
import Modal from '@elements/Modal.astro'
import OrderTypeToggle from '@elements/OrderTypeToggle.astro'
import PickupPoint from '@elements/PickupPoint.astro'

export const modal = '#order-type'
---

<!-- SINGLETON -->
<Modal
  tag="e-order-type"
  id="order-type"
  class="order-type"
>
  <div class="order-type__content">
    <div class="order-type__left">
      <div
        class="f-d-24-s f-m-18-s order-type__title"
        set:html="Выберите способ получения заказа"
      />

      <OrderTypeToggle class="order-type__toggle" />

      <div class="order-type__variants">
        <div
          class="order-type__delivery"
          aria-hidden="false"
          data-order-type="delivery"
        >
          <p class="f-d-16-r f-m-14-r order-type__delivery__description"
            >Хотим убедиться, что&nbsp;вы&nbsp;находитесь в&nbsp;зоне доставки,
            введите&nbsp;пожалуйста адрес</p
          >

          <input
            type="text"
            class="f-d-16-r f-m-14-r order-type__delivery__input"
            placeholder="Город, улица, дом"
          />

          <div class="f-d-16-r f-m-14-r order-type__delivery__price"> </div>
        </div>

        <div
          class="order-type__pickup"
          aria-hidden="true"
          data-order-type="pickup"
        >
          <e-input-group class="order-type__pickup__input-group">
            <PickupPoint
              class="order-type__pickup__point"
              name="Точка самовывоза"
              value="улица Щербакова, 48, Зеленоград, Москва"
              addressType="Фудмолл"
            />
            <PickupPoint
              class="order-type__pickup__point"
              name="Точка самовывоза"
              value="Новокрюковская улица, 1824, Зеленоград, Москва"
              addressType="Пункт самовывоза"
            />
            <PickupPoint
              class="order-type__pickup__point"
              name="Точка самовывоза"
              value="ЖК Жемчужина Зеленограда, 10.1, 17-й микрорайон, Зеленоград, Москва"
              addressType="Пункт самовывоза"
            />
            <PickupPoint
              class="order-type__pickup__point"
              name="Точка самовывоза"
              value="5253-й проезд, 1с1, Зеленоград, Москва"
              addressType="Фудмолл"
            />
          </e-input-group>
        </div>
      </div>

      <div class="order-type__bottom">
        <LocationButton class="order-type__location" />
        <Button
          class="order-type__continue"
          modal="order-type"
          >Продолжить</Button
        >
      </div>
    </div>

    <Map class="order-type__map" />
  </div>
</Modal>

<style is:global>
  .order-type {
  }

  .order-type__content {
    width: 120rem;
    min-height: 52rem;

    display: flex;
    gap: 5rem;

    @media (max-width: 768px) {
      width: 100%;
      gap: 0;
      flex-direction: column;
    }
  }

  .order-type__left {
    width: 52.5rem;

    display: flex;
    flex-direction: column;
    align-items: center;

    @media (max-width: 768px) {
      width: 100%;
      display: contents;
    }
  }

  .order-type__title {
    text-align: center;

    margin-bottom: 3.2rem;

    @media (max-width: 768px) {
      margin-bottom: 2.4rem;
    }
  }

  .order-type__toggle {
    display: flex;
    justify-content: center;
    gap: 0.8rem;

    margin-bottom: 2.4rem;
  }

  .order-type__button {
  }

  .order-type__variants {
  }

  .order-type__delivery {
    display: none;

    &[aria-hidden='false'] {
      display: block;
    }
  }

  .order-type__delivery__description {
    text-align: center;
    margin-bottom: 1.6rem;

    @media (max-width: 768px) {
      margin-bottom: 0.8rem;
    }
  }

  .order-type__delivery__input {
    position: relative;
    z-index: 1;
    width: 100%;

    height: 4.3rem;
    margin-bottom: 1.6rem;
    padding: 1.2rem 1.6rem;
    border-radius: var(--border-radius-1);
    background-color: var(--color-secondary-2);

    @media (max-width: 768px) {
      height: 4.1rem;
    }
  }

  .order-type__delivery__price {
    margin-bottom: 3.2rem;

    @media (max-width: 768px) {
      text-align: center;
      margin-bottom: 1.2rem;
    }

    b {
      color: var(--color-primary-3);
    }
  }

  .order-type__pickup {
    display: none;
    flex-direction: column;

    &[aria-hidden='false'] {
      display: flex;
    }
  }

  .order-type__pickup__input-group {
    display: grid;
    gap: 1rem;

    margin-bottom: 3.2rem;

    @media (max-width: 768px) {
      gap: 0.8rem;
      margin-bottom: 2.4rem;
    }
  }

  .order-type__pickup__point {
    width: 100%;
  }

  .order-type__bottom {
    width: 100%;

    display: flex;
    align-items: center;
    justify-content: space-between;

    /* margin-top: 1.6rem; */

    @media (max-width: 768px) {
      display: contents;
    }
  }

  .order-type__location {
    @media (max-width: 768px) {
      margin-bottom: 0.4rem;
    }
  }

  .order-type__continue {
    --type: close;
    --height: 4.3rem;

    .order-type.invalid-address & {
      opacity: 0.4;
      pointer-events: none;
      cursor: not-allowed;
    }

    @media (max-width: 768px) {
      width: 100%;
      margin-top: 2.4rem;
      order: 1;
    }
  }

  .order-type__map {
    width: 52.5rem;
    height: 50rem;

    border-radius: var(--border-radius-2);
    background-color: var(--color-secondary-2);
    overflow: hidden;

    @media (max-width: 768px) {
      width: 100%;
      height: 25rem;
    }
  }
</style>

<script>
  import { SwipePopoverElement } from '@lib/SwipePopoverElement'
  import { orderStore } from '@stores/orderStore'
  import type { InputGroupElement } from '@lib/InputGroupElement'
  import type { YMapElement, YMapEvents } from '@elements/Map.astro.0.mjs'
  import { debounce } from 'aptechka/utils'
  import { deliveryZonesStore } from '@stores/deliveryZonesStore'

  export class OrderTypeElement extends SwipePopoverElement {
    #orderVariantElements: Array<HTMLElement> = []
    #deliveryPriceElement: HTMLElement | null = null
    #deliveryInputElement: HTMLInputElement | null = null
    #pickupInputElement: InputGroupElement | null = null
    #mapElement: YMapElement | null = null
    #locationButtonElement: HTMLElement | null = null
    #distanceElements: Array<HTMLElement> = []

    #findLocationAttempts = 0

    constructor() {
      super()

      this.addEventListener('popoverOpened', () => {
        if (orderStore.type === 'delivery') {
          this.#deliveryInputElement?.focus()
        }
      })
    }

    protected override connectedCallback() {
      super.connectedCallback()

      this.#orderVariantElements = [...this.querySelectorAll<HTMLElement>('[data-order-type]')]

      this.#deliveryPriceElement = this.querySelector('.order-type__delivery__price')

      this.#deliveryInputElement = this.querySelector('.order-type__delivery__input')
      this.#deliveryInputElement?.addEventListener('input', this.#deliveryInputListener)

      this.#pickupInputElement = this.querySelector('.order-type__pickup__input-group')
      this.#pickupInputElement?.addEventListener('inputGroupValueChange', this.#pickupInputListener)

      this.#mapElement = this.querySelector('e-map')
      this.#mapElement?.addEventListener('markerClick', this.#mapMarkerClickListener)

      this.#locationButtonElement = this.querySelector('.order-type__location')
      this.#locationButtonElement?.addEventListener('click', this.#locationButtonListener)

      this.#distanceElements = [...this.querySelectorAll<HTMLElement>('[data-distance-value]')]

      Promise.all([customElements.whenDefined('e-map')]).then(() => {
        if (this.isConnected) {
          orderStore.subscribeToType(this.#orderStoreTypeChangeListener)
        }
      })

      addEventListener('keydown', (e) => {
        if (e.key === '0') {
          this.open()
        }
      })
    }

    protected override disconnectedCallback() {
      super.disconnectedCallback()

      this.#deliveryInputElement?.removeEventListener('input', this.#deliveryInputListener)

      this.#pickupInputElement?.removeEventListener(
        'inputGroupValueChange',
        this.#pickupInputListener,
      )

      this.#mapElement?.removeEventListener('markerClick', this.#mapMarkerClickListener)

      this.#locationButtonElement?.removeEventListener('click', this.#locationButtonListener)

      orderStore.unsubscribeFromType(this.#orderStoreTypeChangeListener)
    }

    #orderStoreTypeChangeListener = () => {
      this.#orderVariantElements.forEach((element) => {
        if (element.getAttribute('data-order-type') === orderStore.type) {
          element.ariaHidden = 'false'
        } else {
          element.ariaHidden = 'true'
        }
      })

      if (orderStore.type === 'pickup') {
        this.#mapElement?.toggleMarkers(true)
        this.#mapElement?.toggleZones(false)
        this.#updateStorePickupAddress()
      } else {
        this.#mapElement?.toggleMarkers(false)
        this.#mapElement?.toggleZones(true)
        this.#searchForAddress()
      }
    }

    #deliveryInputListener = debounce(() => {
      this.#searchForAddress()
    }, 50)

    async #updateLocation(callback: Function) {
      document.documentElement.classList.add('location-search')

      await callback()

      this.#updateDistances()
      this.#updateZone()

      document.documentElement.classList.remove('location-search')
    }

    #updateDistances() {
      const distances = this.#mapElement?.getDistances()

      this.#distanceElements.forEach((element) => {
        const address = element.getAttribute('data-distance-value')
        const distance = distances?.find((d) => d.address === address)

        if (distance?.value) {
          element.textContent = distance.value.toFixed(2) + ' км'
        } else {
          element.textContent = ''
        }
      })
    }

    #updateZone() {
      const zone = this.#mapElement?.getZone()

      if (this.#deliveryPriceElement) {
        if (zone?.description) {
          this.#deliveryPriceElement.textContent = zone.description
        } else {
          if (this.#mapElement?.getUserAddress()) {
            this.#deliveryPriceElement.textContent =
              'Вы не попадаете в зону доставки. Возможность доставки за город или на удаленные районы обсуждается индивидуально.'
          } else {
            this.#deliveryPriceElement.textContent = ''
          }
        }
      }

      deliveryZonesStore.setUserZone(zone?.zone)
    }

    async #searchForAddress() {
      const value = this.#deliveryInputElement?.value

      if (this.#mapElement) {
        await this.#updateLocation(() => {
          return this.#mapElement!.search(value || '')
        })

        const address = this.#mapElement.getUserAddress()

        this.classList.toggle('invalid-address', !address)

        orderStore.setAddress(address)
      }
    }

    #pickupInputListener = () => {
      this.#updateStorePickupAddress()
    }

    #updateStorePickupAddress() {
      const value = this.#pickupInputElement?.value || ''

      orderStore.setAddress(value)
      this.#mapElement?.pickMarker(value)
      this.classList.toggle('invalid-address', !value)
    }

    #locationButtonListener = async () => {
      if (this.#mapElement) {
        const attempt = ++this.#findLocationAttempts

        await this.#updateLocation(() => {
          return this.#mapElement!.findUserLocation()
        })

        if (attempt === this.#findLocationAttempts) {
          if (this.#deliveryInputElement) {
            this.#deliveryInputElement.value = this.#mapElement.getUserAddress()
            this.#deliveryInputElement.dispatchEvent(new Event('input'))
          }
          if (!location) {
            alert('Не удалось установить ваше местоположение')
          }
        }
      }
    }

    #mapMarkerClickListener = (e: YMapEvents['markerClick']) => {
      if (orderStore.type === 'pickup') {
        this.#pickupInputElement?.changeValue(e.detail.address)
      }
    }
  }

  if (!customElements.get('e-order-type')) {
    customElements.define('e-order-type', OrderTypeElement)
  }

  declare global {
    interface HTMLElementTagNameMap {
      'e-order-type': OrderTypeElement
    }
  }
</script>
