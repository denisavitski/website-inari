---
import PricePartValue from './PricePartValue.astro'
import type { PricePartValueType } from './PricePartValue.astro.0.mts'

export interface Props {
  class?: string
  font?: string
  title?: string
  type?: PricePartValueType
}

const {
  class: className,
  font = 'f-d-16-s f-m-14-s',
  title = 'Сумма',
  type = 'final',
  ...rest
} = Astro.props
---

<!-- Если не нужен функционал https://website-inari-git-modx-denisavitskis-projects.vercel.app/ui/elements/Dev
  можно замениь тег на любой другой
-->
<e-price-part
  {...rest}
  class:list={['price-part', font, className]}
  type={type}
>
  <div
    class="price-part__title"
    set:html={title}
  />
  <PricePartValue {type} />
</e-price-part>

<style>
  .price-part {
    width: 100%;
    display: flex;
    justify-content: space-between;

    &.invisible {
      display: none;
    }

    &[type='discount'] {
      color: var(--color-secondary-6);
    }

    &[type='final'],
    &[type='delivery'] {
      color: var(--color-primary-2);
    }
  }
</style>

<script>
  import { globalStore } from '@stores/globalStore'
  import type { PricePartValueType } from './PricePartValue.astro.0.mts'
  import { productsToString } from '@utils/string'

  export class PricePartElement extends HTMLElement {
    #titleElement: HTMLElement | null = null

    protected connectedCallback() {
      this.#titleElement = this.querySelector('.price-part__title')
      globalStore.all.subscribe(this.#storeChangeListener)
    }

    protected disconnectedCallback() {
      globalStore.all.unsubscribe(this.#storeChangeListener)
    }

    #storeChangeListener = () => {
      const type = this.getAttribute('type') as PricePartValueType

      if (type === 'discount') {
        this.classList.toggle('invisible', !globalStore.promocode?.value?.discount)
      } else if (type === 'products') {
        if (this.#titleElement) {
          this.#titleElement.textContent = `${globalStore.productsNumber.value} ${productsToString(globalStore.productsNumber.value)}`
        }
      } else if (type === 'delivery') {
        this.classList.toggle(
          'invisible',
          globalStore.orderType.value === 'pickup' ||
            !globalStore.address.value ||
            !globalStore.delivery.userZone,
        )
      }
    }
  }

  if (!customElements.get('e-price-part')) {
    customElements.define('e-price-part', PricePartElement)
  }

  declare global {
    interface HTMLElementTagNameMap {
      'e-price-part': PricePartElement
    }
  }
</script>
