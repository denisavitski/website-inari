---
import PricePartValue from './PricePartValue.astro'
import type { PricePartValueType } from './PricePartValue.astro.0.mts'

export interface Props {
  class?: string
  font?: string
  title?: string
  type?: PricePartValueType
}

const {
  class: className,
  font = 'f-d-16-s f-m-14-s',
  title = 'Сумма',
  type = 'total',
  ...rest
} = Astro.props
---

<e-price-part
  {...rest}
  class:list={['price-part', font, className]}
  type={type}
>
  <div
    class="price-part__title"
    set:html={title}
  />
  <PricePartValue {type} />
</e-price-part>

<style>
  .price-part {
    width: 100%;
    display: flex;
    justify-content: space-between;

    &.invisible {
      display: none;
    }

    &[type='discount'] {
      color: var(--color-secondary-6);
    }

    &[type='total'],
    &[type='delivery'] {
      color: var(--color-primary-2);
    }
  }
</style>

<script>
  import { orderStore } from '@stores/orderStore'
  import type { PricePartValueType } from './PricePartValue.astro.0.mts'
  import { basketStore } from '@stores/basketStore'
  import { debounce } from 'aptechka/utils'
  import { productsToString } from '@utils/string'
  import { deliveryZonesStore } from '@stores/deliveryZonesStore'

  export class PricePartElement extends HTMLElement {
    #titleElement: HTMLElement | null = null

    protected connectedCallback() {
      this.#titleElement = this.querySelector('.price-part__title')
      orderStore.subscribe(this.#storeChangeListener)
      basketStore.subscribe(this.#storeChangeListener)
    }

    protected disconnectedCallback() {
      orderStore.unsubscribe(this.#storeChangeListener)
      basketStore.unsubscribe(this.#storeChangeListener)
    }

    #storeChangeListener = debounce(() => {
      const type = this.getAttribute('type') as PricePartValueType

      if (type === 'discount') {
        this.classList.toggle('invisible', !orderStore.discount)
      } else if (type === 'products') {
        if (this.#titleElement) {
          this.#titleElement.textContent = `${basketStore.fullAmount} ${productsToString(basketStore.fullAmount)}`
        }
      } else if (type === 'delivery') {
        this.classList.toggle(
          'invisible',
          orderStore.type === 'pickup' || !orderStore.address || !deliveryZonesStore.userZone,
        )
      }
    }, 10)
  }

  if (!customElements.get('e-price-part')) {
    customElements.define('e-price-part', PricePartElement)
  }

  declare global {
    interface HTMLElementTagNameMap {
      'e-price-part': PricePartElement
    }
  }
</script>
