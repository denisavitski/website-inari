---
import type { BasketStoreItem } from '@stores/basketStore'

export interface ProductVariant {
  shortName: string
  name: string
  pid: string
  size: string
  price: string | number
  oldPrice?: string | number | undefined
}

export interface Props extends Partial<BasketStoreItem> {
  class?: string
}

const {
  class: className,
  price = '250',
  name = 'Калифорния лайт, 8 шт.',
  description = '',
  pid = '1',
  image = '/images/food/1.jpg',
  ...rest
} = Astro.props
---

<e-product
  {...rest}
  class:list={['product', className]}
  {name}
  {price}
  {description}
  {pid}
  {image}
>
  <slot />
</e-product>

<script>
  import { basketStore } from '@stores/basketStore'
  import type { ProductButtonElement } from './ProductButton.astro.0.mts'
  import type { InputGroupElement } from '@lib/InputGroupElement'
  import type { PriceElement } from './Price.astro.0.mts'

  export class ProductElement extends HTMLElement {
    #buttonElements: Array<ProductButtonElement> = []
    #variantsGroupElements: Array<InputGroupElement> = []
    #priceElements: Array<PriceElement> = []

    public get pid() {
      return this.getAttribute('pid') || ''
    }

    public get buttonElements() {
      return this.#buttonElements
    }

    protected connectedCallback() {
      this.#buttonElements = [...this.querySelectorAll('e-product-button')]

      this.#buttonElements.forEach((element) => {
        element.addEventListener('productButtonCounterChange', this.#counterChangeListener)
      })

      this.#variantsGroupElements = [...this.querySelectorAll('e-input-group')]

      this.#variantsGroupElements.forEach((element) => {
        element.addEventListener('inputGroupValueChange', this.#variantChangeListener)
      })

      this.#priceElements = [...this.querySelectorAll('e-price')]

      if (document.readyState === 'complete') {
        this.#loadListener()
      } else {
        addEventListener('load', this.#loadListener)
      }
    }

    protected disconnectedCallback() {
      this.#buttonElements.forEach((element) => {
        element.removeEventListener('productButtonCounterChange', this.#counterChangeListener)
      })

      this.#variantsGroupElements.forEach((element) => {
        element.removeEventListener('inputGroupValueChange', this.#variantChangeListener)
      })

      basketStore.unsubscribe(this.#storeChangeListener)

      removeEventListener('load', this.#loadListener)
    }

    #counterChangeListener = (event: Event) => {
      const ct = event.currentTarget as ProductButtonElement
      const amount = ct.counter

      const price = parseInt(this.getAttribute('price') || '0') || 0
      const name = this.getAttribute('name') || ''
      const description = this.getAttribute('description') || ''
      const image = this.getAttribute('image') || ''

      basketStore.setItem({
        amount: amount,
        description: description,
        price: price,
        name: name,
        pid: this.pid,
        image: image,
      })
    }

    #loadListener = () => {
      if (this.isConnected) {
        basketStore.subscribe(this.#storeChangeListener)

        if (this.#variantsGroupElements.length) {
          this.#changeVariant(this.#variantsGroupElements[0]!)
        }
      }
    }

    #storeChangeListener = () => {
      const storeItem = basketStore.items.find((item) => item.pid === this.pid)

      if (storeItem) {
        this.#buttonElements.forEach((element) => {
          element?.set(storeItem.amount)
        })
      } else if (basketStore.prevItems) {
        this.#buttonElements.forEach((element) => {
          element?.set(0)
        })
      }
    }

    #variantChangeListener = (e: Event) => {
      const element = e.currentTarget as InputGroupElement
      this.#changeVariant(element)
    }

    #changeVariant(actigeGroupElement: InputGroupElement) {
      if (basketStore.prevItems) {
        this.#buttonElements.forEach((element) => {
          element?.set(0)
        })
      }

      const currentInput = actigeGroupElement.input

      if (currentInput) {
        this.#variantsGroupElements.forEach((element) => {
          const currentValue = currentInput!.value

          if (actigeGroupElement !== element && element.value !== actigeGroupElement.value) {
            element.changeValue(currentValue)
          }
        })

        const name = currentInput.getAttribute('data-name')
        const pid = currentInput.getAttribute('data-pid')
        const price = currentInput.getAttribute('data-price')
        const oldPrice = currentInput.getAttribute('data-old-price')

        if (name) {
          this.setAttribute('name', name)
        }

        if (pid) {
          this.setAttribute('pid', pid)
        }

        if (price) {
          this.setAttribute('price', price)
        }

        this.#priceElements.forEach((element) => element?.updateValue(price, oldPrice))

        for (const key in currentInput.dataset) {
          const value = currentInput.dataset[key]

          if (value && key.toLowerCase().includes('variant')) {
            const keyWithoutVariant = key
              .replace('variant', '')
              .replace('Variant', '')
              .replace('value', '')
              .replace('Value', '')
              .toLowerCase()

            if (keyWithoutVariant) {
              const elements = this.querySelectorAll(`[data-variant-prop="${keyWithoutVariant}"]`)

              elements.forEach((element) => {
                if (element) {
                  element.textContent = value
                }
              })
            }
          }
        }
      }
    }
  }

  if (!customElements.get('e-product')) {
    customElements.define('e-product', ProductElement)
  }

  declare global {
    interface HTMLElementTagNameMap {
      'e-product': ProductElement
    }
  }
</script>
