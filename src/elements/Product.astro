---
import type { BasketStoreItem } from '@stores/basketStore'

export interface Props extends Partial<BasketStoreItem> {
  class?: string
}

const {
  class: className,
  price = '250',
  name = 'Калифорния лайт, 8 шт.',
  description = 'Сливочный сыр, сурими, салат Айсберг, икра тобико оранжевая, кунжут',
  pid = '1',
  image = '/images/food/1.jpg',
  ...rest
} = Astro.props
---

<e-product
  {...rest}
  class:list={['product', className]}
  {name}
  {price}
  {description}
  {pid}
  {image}
  data-popover-content
>
  <slot />
</e-product>

<script>
  import { basketStore } from '@stores/basketStore'
  import type { ProductButtonElement } from './ProductButton.astro.0.mts'
  import type { InputGroupElement } from '@lib/InputGroupElement'

  export class ProductElement extends HTMLElement {
    #buttonElement: ProductButtonElement | null = null
    #variantsGroupElement: InputGroupElement | null = null

    public get pid() {
      return this.getAttribute('pid') || ''
    }

    public get buttonElement() {
      return this.#buttonElement
    }

    protected connectedCallback() {
      this.#buttonElement = this.querySelector('e-product-button')

      this.#buttonElement?.addEventListener(
        'productButtonCounterChange',
        this.#counterChangeListener,
      )

      this.#variantsGroupElement = this.querySelector('e-input-group')

      this.#variantsGroupElement?.addEventListener('inputGroupValueChange', this.#variantChange)

      Promise.all([
        customElements.whenDefined('e-product-button'),
        customElements.whenDefined('e-input-group'),
      ]).then(() => {
        if (this.isConnected) {
          basketStore.subscribe(this.#storeChangeListener)

          this.#variantChange()
        }
      })
    }

    protected disconnectedCallback() {
      this.#buttonElement?.removeEventListener(
        'productButtonCounterChange',
        this.#counterChangeListener,
      )

      this.#variantsGroupElement?.removeEventListener('inputGroupValueChange', this.#variantChange)

      basketStore.unsubscribe(this.#storeChangeListener)
    }

    #counterChangeListener = () => {
      const amount = this.#buttonElement!.counter

      const price = parseInt(this.getAttribute('price') || '0') || 0
      const name = this.getAttribute('name') || ''
      const description = this.getAttribute('description') || ''
      const image = this.getAttribute('image') || ''

      basketStore.setItem({
        amount: amount,
        description: description,
        price: price,
        name: name,
        pid: this.pid,
        image: image,
      })
    }

    #storeChangeListener = () => {
      const storeItem = basketStore.items.find((item) => item.pid === this.pid)

      if (storeItem) {
        this.#buttonElement?.set(storeItem.amount)
      } else if (basketStore.prevItems) {
        this.#buttonElement?.set(0)
      }
    }

    #variantChange = () => {
      if (basketStore.prevItems) {
        this.#buttonElement?.set(0)
      }

      const currentInput = this.#variantsGroupElement?.input

      if (currentInput) {
        const name = currentInput.getAttribute('data-name')
        const pid = currentInput.getAttribute('data-pid')
        const price = currentInput.getAttribute('data-price')

        if (name) {
          this.setAttribute('name', name)
        }

        if (pid) {
          this.setAttribute('pid', pid)
        }

        if (price) {
          this.setAttribute('price', price)
        }

        for (const key in currentInput.dataset) {
          const value = currentInput.dataset[key]

          if (value && key.toLowerCase().includes('variant')) {
            const keyWithoutVariant = key
              .replace('variant', '')
              .replace('Variant', '')
              .replace('value', '')
              .replace('Value', '')
              .toLowerCase()

            if (keyWithoutVariant) {
              const element = this.querySelector(`[data-variant-${keyWithoutVariant}]`)

              if (element) {
                element.textContent = value
              }
            }
          }
        }
      }
    }
  }

  if (!customElements.get('e-product')) {
    customElements.define('e-product', ProductElement)
  }

  declare global {
    interface HTMLElementTagNameMap {
      'e-product': ProductElement
    }
  }
</script>
