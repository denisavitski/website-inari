---
export interface Props {
  class?: string
  inputStyles?: string
  name?: string
}

const { class: className, inputStyles, name = 'Адрес', ...rest } = Astro.props
---

<e-address-input
  {...rest}
  class:list={['focus address-input', className]}
  target="order-type"
>
  <input
    class="visually-hidden"
    name={name}
    required
    title={name}
    tabindex="-1"
  />
  <div class:list={['address-input__input', inputStyles]}>
    <div class="address-input__value">{name}</div>
    <span class="address-input__change-button">Изменить</span>
  </div>
</e-address-input>

<style>
  .address-input {
    position: relative;

    display: flex;
    align-items: center;

    cursor: pointer;
    border-radius: var(--border-radius-1);

    &:focus {
      outline: auto;
    }
  }

  .address-input__input {
    display: flex;
    align-items: center;
    justify-content: space-between;
    height: unset;
    min-height: 4.3rem;
  }

  .address-input__value {
    width: 39.5rem;

    color: var(--color-secondary-3);

    .address-input.filled & {
      color: var(--color-primary-2);
    }
  }

  .address-input__change-button {
    font-size: 1.6rem;
    color: var(--color-secondary-6);

    @media (max-width: 768px) {
      font-size: 1.2rem;
    }
  }
</style>

<script>
  import { globalStore } from '@stores/globalStore'
  import { PopoverButtonElement } from 'aptechka/popover'

  export class AddressInputElement extends PopoverButtonElement {
    #inputElement: HTMLInputElement | null = null
    #valueElement: HTMLElement | null = null

    protected override connectedCallback() {
      super.connectedCallback()

      this.#inputElement = this.querySelector('input')
      this.#valueElement = this.querySelector('.address-input__value')

      globalStore.address.subscribe(this.#userAddressChangeListener)
    }

    protected override disconnectedCallback() {
      super.disconnectedCallback()

      globalStore.address.subscribe(this.#userAddressChangeListener)
    }

    #userAddressChangeListener = () => {
      this.classList.toggle('filled', !!globalStore.address.value)

      if (this.#inputElement) {
        this.#inputElement.value = globalStore.address.value
      }

      if (this.#valueElement) {
        this.#valueElement.textContent = globalStore.address.value || this.#inputElement?.name || ''
      }

      this.#inputElement?.dispatchEvent(new Event('change'))
    }
  }

  if (!customElements.get('e-address-input')) {
    customElements.define('e-address-input', AddressInputElement)
  }

  declare global {
    interface HTMLElementTagNameMap {
      'e-address-input': AddressInputElement
    }
  }
</script>
