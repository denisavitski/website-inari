---
import type { ProductButtonSize } from './ProductButton.astro.0.mts'

export interface Props {
  class?: string
  size?: ProductButtonSize
  counter?: string | number
  placeholder?: string | number | false
  max?: string | number
}

const { class: className, size = 'big', counter = 0, placeholder, max = 99, ...rest } = Astro.props
---

<e-product-button
  {...rest}
  class:list={[className]}
  size={size}
  counter={counter}
  max={max}
  placeholder={placeholder}
>
</e-product-button>

<script>
  import { clamp, createStylesheet, dispatchEvent } from 'aptechka/utils'

  export interface ProductButtonEvents {
    productButtonCounterChange: CustomEvent<{ counter: number }>
  }

  const stylesheet = createStylesheet({
    ':host': {
      display: 'inline-grid',
    },

    '.placeholder': {
      boxSizing: 'border-box',
      gridColumn: '1/1',
      gridRow: '1/1',

      fontSize: '1.6rem',
      fontWeight: '600',

      position: 'relative',
      zIndex: 1,

      display: 'none',
      alignItems: 'center',
      justifyContent: 'center',

      width: '100%',
      padding: '0 1.6rem',

      backgroundColor: 'var(--background-color, var(--color-primary-2))',
      color: 'var(--color, var(--color-primary-1))',
      borderRadius: 'var(--border-radius-1)',
      cursor: 'pointer',

      userSelect: 'none',
    },

    ':host(.has-placeholder) .placeholder': {
      display: 'flex',
    },

    ':host(.positive-value) .placeholder': {
      display: 'none',
    },

    '.content': {
      boxSizing: 'border-box',

      gridColumn: '1/1',
      gridRow: '1/1',

      fontWeight: '600',
      lineHeight: '120%',

      display: 'inline-flex',
      alignItems: 'center',
      justifyContent: 'space-between',

      width: '100%',
      padding: 'var(--padding, 0.6rem)',

      color: 'var(--color-primary-2)',
      border: '0.1rem solid var(--color-primary-2)',
      borderRadius: 'var(--border-radius-1)',
    },

    ':host([size="big"]) .content, :host([size="always-big"]) .content': {
      gap: '1.6rem',
    },

    ':host([size="small"]) .content': {
      gap: '1.2rem',
    },

    '.value': {
      fontVariantNumeric: 'tabular-nums',
    },

    ':host([size="big"]) .value, :host([size="always-big"]) .value': {
      fontSize: '1.6rem',
    },

    ':host([size="small"]) .value': {
      fontSize: '1.2rem',
    },

    '.sign': {
      boxSizing: 'border-box',

      borderRadius: '0.3rem',

      display: 'inline-flex',
      alignItems: 'center',
      justifyContent: 'center',

      userSelect: 'none',
      border: 'none',
      background: 'none',
      fontFamily: 'inherit',
      color: 'inherit',
      cursor: 'pointer',
      padding: '0',
    },

    ':host([size="big"]) .sign, :host([size="always-big"]) .sign': {
      fontSize: '2.4rem',
      width: '2.4rem',
      height: '2.4rem',
    },

    ':host([size="small"]) .sign': {
      fontSize: '1.6rem',
      width: '1.5rem',
      height: '1.5rem',
    },

    '.plus': {
      borderLeft: '0.1rem solid var(--color-primary-2)',
    },

    '.minus': {
      borderRight: '0.1rem solid var(--color-primary-2)',
    },

    '@media(max-width: 768px)': {
      '.placeholder': {
        fontSize: '1.4rem',
      },

      '.content': {
        borderRadius: '0.8rem',
      },

      ':host([size="big"]) .content': {
        gap: '1.2rem',
      },

      ':host([size="big"]) .value': {
        fontSize: '1.2rem',
      },

      ':host([size="big"]) .sign': {
        fontSize: '1.6rem',
        width: '1.5rem',
        height: '1.5rem',
      },
    },
  })

  export type ProductButtonSize = 'big' | 'small' | 'always-big'

  export class ProductButtonElement extends HTMLElement {
    #placeholderElement: HTMLElement
    #minusElement: HTMLElement
    #plusElement: HTMLElement
    #valueElement: HTMLElement
    #counter = 0
    #max = 99
    #clickAllowed = true

    constructor() {
      super()

      const shadow = this.attachShadow({ mode: 'open' })
      shadow.adoptedStyleSheets = [...shadow.adoptedStyleSheets, stylesheet]

      shadow.innerHTML = `
        <div class="placeholder"></div>
        <div class="content">
          <button class="minus sign">-</button>
          <div class="value"></div>
          <button class="plus sign">+</button>
        </div>
      `

      this.#placeholderElement = shadow.querySelector('.placeholder')!
      this.#minusElement = shadow.querySelector('.minus')!
      this.#valueElement = shadow.querySelector('.value')!
      this.#plusElement = shadow.querySelector('.plus')!

      this.#minusElement?.addEventListener('click', () => {
        this.shift(-1)
      })

      this.#plusElement?.addEventListener('click', () => {
        this.shift(1)
      })

      this.addEventListener('click', () => {
        if (this.#clickAllowed && this.classList.contains('has-placeholder')) {
          this.set(1)
        }
      })
    }

    public get counter() {
      return this.#counter
    }

    public set(value: number) {
      const prev = this.#counter

      this.#counter = clamp(value, 0, this.#max)

      if (this.#valueElement) {
        this.#valueElement.textContent = this.#counter.toString() || '0'
      }

      if (prev === this.#counter) {
        return
      }

      this.classList.toggle('positive-value', !!this.#counter)

      setTimeout(() => {
        this.#clickAllowed = !this.#counter
      })

      dispatchEvent(this, 'productButtonCounterChange', {
        detail: {
          counter: this.#counter,
        },
      })
    }

    public shift(value: number) {
      this.set(this.#counter + value)
    }

    public setPlaceholder(value: string) {
      this.#placeholderElement.textContent = value
      this.classList.toggle('has-placeholder', !!value)
    }

    protected connectedCallback() {
      const placeholderAttr = this.getAttribute('placeholder') || ''
      const maxAttr = parseInt(this.getAttribute('max') || '99') || 99
      const counterAttr = parseInt(this.getAttribute('counter') || '0') || 0

      this.setPlaceholder(placeholderAttr)
      this.#max = maxAttr
      this.set(counterAttr)

      this.setAttribute('data-popover-content', '')
    }
  }

  if (!customElements.get('e-product-button')) {
    customElements.define('e-product-button', ProductButtonElement)
  }

  declare global {
    interface HTMLElementTagNameMap {
      'e-product-button': ProductButtonElement
    }

    interface HTMLElementEventMap extends ProductButtonEvents {}
  }
</script>
