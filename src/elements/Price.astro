---
export interface Props {
  class?: string
  value?: string | number
  oldValue?: string | number | false
}

const { class: className, value = '100', oldValue = '200', ...rest } = Astro.props
---

<e-price
  {...rest}
  class:list={['price', className]}
  value={value}
  old-value={oldValue || ''}
></e-price>

<script>
  import { numberToPrice } from '@utils/number'
  import { createStylesheet } from 'aptechka/utils'

  const stylesheet = createStylesheet({
    ':host': {
      display: 'flex',
      alignItems: 'center',
      gap: '1.2rem',
    },

    '.value': {
      fontSize: '2rem',
      lineHeight: '120%',
      fontWeight: '600',
      color: 'var(--color-secondary-3)',
    },

    ':host(.has-old-value) .value:not(.old)': {
      color: 'var(--color-functional-1)',
    },

    '.old': {
      position: 'relative',
      color: 'var(--color-secondary-3)',

      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
    },

    '.old::after': {
      content: '""',

      position: 'absolute',

      display: 'block',

      width: '100%',
      height: '0.15rem',

      backgroundColor: 'var(--color-secondary-3)',

      transform: 'rotate(-25deg)',
    },
  })

  export class PriceElement extends HTMLElement {
    #valueElement: HTMLElement
    #oldValueElement: HTMLElement

    #value: number = 0

    constructor() {
      super()

      const shadow = this.attachShadow({ mode: 'open' })
      shadow.adoptedStyleSheets = [...shadow.adoptedStyleSheets, stylesheet]

      shadow.innerHTML = `
        <div class="value"></div>
        <div class="value old"></div>
      `

      this.#valueElement = shadow.querySelector('.value')!
      this.#oldValueElement = shadow.querySelector('.old')!
    }

    public get value() {
      return this.#value
    }

    public updateValue(
      value?: number | string | null | undefined,
      oldValue?: number | string | null | undefined,
    ) {
      this.#value = parseInt(value?.toString() || '0') || 0

      this.#valueElement.textContent = numberToPrice(this.#value || 0)

      if (oldValue) {
        this.classList.add('has-old-value')
        this.#oldValueElement.textContent = numberToPrice(oldValue || 0)
      } else {
        this.classList.remove('has-old-value')
        this.#oldValueElement.textContent = ''
      }
    }

    protected connectedCallback() {
      this.updateValue(this.getAttribute('value'), this.getAttribute('old-value'))
    }
  }

  if (!customElements.get('e-price')) {
    customElements.define('e-price', PriceElement)
  }

  declare global {
    interface HTMLElementTagNameMap {
      'e-price': PriceElement
    }
  }
</script>
