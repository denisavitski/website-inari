---
import type { HTMLAttributes } from 'astro/types'

export interface Props extends HTMLAttributes<'div'> {
  name?: string
  handler?: string
  successTitle?: string | undefined | false
  successMessage?: string | undefined | false
  errorMessage?: string | undefined | false
  reusable?: boolean
  resetAfterSubmit?: boolean
}

const {
  name = 'form',
  handler = '/test',
  successTitle,
  successMessage,
  errorMessage,
  reusable = true,
  resetAfterSubmit = true,
  ...rest
} = Astro.props
---

<e-form
  {...rest}
  success-title={successTitle}
  success-message={successMessage}
  error-message={errorMessage}
  {name}
  {handler}
  {reusable}
  reset-after-submit={resetAfterSubmit}
>
  <form>
    <div class="form-tmp-inputs"></div>
    <slot />
  </form>
</e-form>

<style is:global>
  e-form {
    display: block;
  }

  e-form form {
    display: contents;
  }
</style>

<script>
  import { PopoverElement, type PopoverEvents } from 'aptechka/popover'
  import { dispatchEvent, findParentElement } from 'aptechka/utils'

  export interface FromEvents {
    formSubmit: CustomEvent
    formSuccess: CustomEvent
    formError: CustomEvent
  }

  export class FormElement extends HTMLElement {
    #popoverElement: PopoverElement | null = null
    #formElement: HTMLFormElement | null = null
    #buttonElement: HTMLButtonElement | null = null
    #inputElements: Array<HTMLInputElement | HTMLTextAreaElement> | null = null
    #tmpInputsContainerElement: HTMLElement | null = null
    #sended = false
    #handler = '/test'
    #reusable = false
    #resetAfterSubmit = false
    #result: any

    public get result() {
      return this.#result
    }

    public checkValidity() {
      const validInputs = this.#inputElements?.filter((inputElement) => {
        return inputElement.validity.valid
      }).length

      if (this.#buttonElement) {
        if (validInputs === this.#inputElements?.length) {
          this.#buttonElement.removeAttribute('data-disabled')
        } else {
          this.#buttonElement.setAttribute('data-disabled', 'true')
        }
      }
    }

    protected connectedCallback() {
      this.#popoverElement = findParentElement(this, PopoverElement)

      this.#formElement = this.querySelector('form')

      this.#handler = this.getAttribute('handler') || '/test'
      this.#reusable = this.hasAttribute('reusable')
      this.#resetAfterSubmit = this.hasAttribute('reset-after-submit')

      if (this.#formElement) {
        this.#tmpInputsContainerElement = this.querySelector<HTMLElement>('.form-tmp-inputs')

        this.#formElement.addEventListener('submit', this.#submitListener)

        this.#inputElements = [
          ...this.#formElement.querySelectorAll('input'),
          ...this.#formElement.querySelectorAll('textarea'),
        ]

        this.#inputElements.forEach((inputElement) => {
          inputElement.addEventListener('input', this.#inputListener)
          inputElement.addEventListener('change', this.#inputListener)
        })

        this.#buttonElement = this.#formElement.querySelector('button[type="submit"]')

        this.checkValidity()

        if (this.#handler === 'fetchit') {
          document.addEventListener('fetchit:success', this.#fetchitSuccesListener as EventListener)
          document.addEventListener('fetchit:error', this.#fetchitErrorListener as EventListener)
        }
      }

      this.#popoverElement?.addEventListener('popoverOpened', this.#popoverOpenedListener)
      this.#popoverElement?.addEventListener('popoverClosed', this.#popoverClosedListener)
    }

    protected disconnectedCallback() {
      this.#inputElements?.forEach((inputElement) => {
        inputElement.removeEventListener('input', this.#inputListener)
        inputElement.removeEventListener('change', this.#inputListener)
      })

      this.#formElement?.removeEventListener('submit', this.#submitListener)

      document.removeEventListener('fetchit:success', this.#fetchitSuccesListener as EventListener)
      document.removeEventListener('fetchit:error', this.#fetchitErrorListener as EventListener)

      this.#popoverElement?.removeEventListener('popoverOpened', this.#popoverOpenedListener)
      this.#popoverElement?.removeEventListener('popoverClosed', this.#popoverClosedListener)
    }

    #submitListener = async (e: SubmitEvent) => {
      e.preventDefault()

      dispatchEvent(this, 'formSubmit', { custom: true })

      if (this.#handler === 'fetchit' || (this.#sended && !this.#reusable)) {
        return
      }

      this.#sended = true

      const formData = new FormData(this.#formElement!)
      formData.set('form-name', this.getAttribute('name') || 'unknown')

      for (let pair of formData) {
        console.log(pair[0] + ', ' + pair[1])
      }

      this.classList.add('pending')

      try {
        if (this.#handler === '/test') {
          await new Promise<void>((res) => {
            setTimeout(() => {
              res()
              this.classList.add('success')
            }, 50)
          })
        } else {
          this.#result = await fetch(this.#handler, {
            method: 'POST',
            body: formData,
          })
        }

        this.#success()
      } catch (e) {
        console.error(e)
        this.#result = e
        this.#error()
      }

      this.classList.remove('pending')
    }

    #inputListener = () => {
      this.checkValidity()
    }

    #fetchitSuccesListener = (e: CustomEvent) => {
      console.log('[fetchit success event]', e)

      const { form } = (e as CustomEvent)?.detail as { form: HTMLFormElement }

      this.#result = e.detail

      if (this.#formElement === form) {
        this.#success()
      }
    }

    #fetchitErrorListener = (e: CustomEvent) => {
      console.log('[fetchit error event]', e)

      const { form } = (e as CustomEvent)?.detail as { form: HTMLFormElement }

      this.#result = e.detail

      if (this.#formElement === form) {
        this.#error()
      }
    }

    #success() {
      const answerElement = document.querySelector('e-form-answer')

      if (answerElement) {
        const successTitle = this.getAttribute('success-title')
        const successMessage = this.getAttribute('success-message')

        if (successTitle) {
          answerElement.setText(successTitle, successMessage || '')
          answerElement.open()
        }
      }

      if (this.#resetAfterSubmit) {
        this.#inputElements?.forEach((element) => {
          if (element.type !== 'radio' && element.type !== 'checkbox') {
            element.value = ''
          }
        })

        this.#inputListener()
      }

      dispatchEvent(this, 'formSuccess', {
        custom: true,
      })
    }

    #error() {
      const errorMessage = this.getAttribute('error-message')

      alert(errorMessage)

      this.#sended = false

      dispatchEvent(this, 'formError', {
        custom: true,
      })
    }

    #popoverOpenedListener = (e: PopoverEvents['popoverOpened']) => {
      const trigger = e.detail.trigger

      if (this.#tmpInputsContainerElement && trigger instanceof HTMLElement) {
        for (const key in trigger.dataset) {
          const value = trigger.dataset[key]

          if (value && key.toLowerCase().includes('input')) {
            const inputElement = document.createElement('input')
            const keyWithoutInput = key.replace('input', '').replace('Input', '')

            if (keyWithoutInput) {
              inputElement.type = 'hidden'
              inputElement.name = keyWithoutInput[0]!.toLowerCase() + keyWithoutInput.slice(1)
              inputElement.value = value
              this.#tmpInputsContainerElement.appendChild(inputElement)
            }
          }
        }
      }
    }

    #popoverClosedListener = () => {
      if (this.#tmpInputsContainerElement) {
        this.#tmpInputsContainerElement.innerHTML = ''
      }
    }
  }

  if (!customElements.get('e-form')) {
    customElements.define('e-form', FormElement)
  }

  declare global {
    interface HTMLElementTagNameMap {
      'e-form': FormElement
    }

    interface HTMLElementEventMap extends FromEvents {}
  }
</script>
