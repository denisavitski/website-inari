---
import type { BasketStoreItem } from '@stores/basketStore'

export interface Props extends BasketStoreItem {
  class?: string
}

const {
  class: className,
  pid = 'string',
  name = 'Калифорния лайт, 8 шт.',
  image = '/images/food/1.jpg',
  description = 'Сливочный сыр, сурими, салат Айсберг, икра тобико оранжевая, кунжут',
  price = '550',
  amount = '1',
  ...rest
} = Astro.props
---

<e-basket-item
  {...rest}
  {pid}
  {name}
  {image}
  {description}
  {price}
  {amount}
  class:list={[className]}
></e-basket-item>

<script>
  import { createStylesheet } from 'aptechka/utils'
  import { numberToPrice } from '@utils/number'
  import { basketStore } from '@stores/basketStore'
  import type { ProductButtonElement } from './ProductButton.astro.0.mts'

  const stylesheet = createStylesheet({
    ':host': {
      position: 'relative',

      width: '100%',

      display: 'grid',
      gridTemplateColumns: 'max-content 1fr',
      gridTemplateRows: 'max-content max-content',
      gridTemplateAreas: `
      "image content"
      "image bottom";
    `,
      gap: '1.6rem 2.4rem',

      padding: '1.6rem !important',

      border: '0.1rem solid var(--color-secondary-1)',
      borderRadius: 'var(--border-radius-2)',
      backgroundColor: 'var(--color-secondary-2)',
    },

    '.remove-button': {
      position: 'absolute',
      right: '1.6rem',
      top: '1.6rem',

      width: '2.4rem',
      height: '2.4rem',

      background: 'none',
      border: 'none',
      padding: '0',
      cursor: 'pointer',
    },

    '.remove-button__icon': {
      width: '100%',
      height: '100%',
      fill: 'var(--color-secondary-3)',
    },

    '.image': {
      gridArea: 'image',
      width: '12rem',
      height: '12rem',
      borderRadius: 'var(--border-radius-1)',
      objectFit: 'cover',
    },

    '.content': {
      gridArea: 'content',
      boxSizing: 'border-box',
      paddingRight: '3.2rem',
    },

    '.name': {
      fontSize: '1.8rem',
      fontWeight: '600',
      lineHeight: '120%',
      marginBottom: '0.4rem',
    },

    '.description': {
      fontSize: '1.6rem',
      fontWeight: '400',
      lineHeight: '120%',
    },

    '.bottom': {
      gridArea: 'bottom',

      boxSizing: 'border-box',
      paddingRight: '3.2rem',

      width: '100%',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'space-between',
    },

    '.price': {
      fontSize: '1.8rem',
      fontWeight: '600',
      lineHeight: '120%',
    },

    '@media(max-width: 768px)': {
      ':host': {
        gridTemplateAreas: `
        "image content"
        "bottom bottom";
      `,
        gap: '0.8rem',
        padding: '0.8rem !important',
      },

      '.remove-button': {
        right: '0.8rem',
        top: '0.8rem',

        width: '1.6rem',
        height: '1.6rem',
      },

      '.content': {
        paddingRight: '2.4rem',
      },

      '.image': {
        width: '6rem',
        height: '5rem',
      },

      '.name': {
        fontSize: '1.2rem',
        marginBottom: '0.2rem',
      },

      '.description': {
        fontSize: '1.2rem',
      },

      '.bottom': {
        flexDirection: 'row-reverse',
        paddingRight: '0',

        paddingTop: '0.8rem',
        borderTop: '0.1rem solid var(--color-secondary-1)',
      },

      '.price': {
        fontSize: '1.6rem',
      },
    },
  })

  export class BasketItemElement extends HTMLElement {
    #removeButtonElement: HTMLElement
    #imageElement: HTMLImageElement
    #nameElement: HTMLElement
    #descriptionElement: HTMLElement
    #productButtonElement: ProductButtonElement
    #priceElement: HTMLElement

    #pid: string = 'unknown'
    #price: number = 0

    constructor() {
      super()

      const shadow = this.attachShadow({ mode: 'open' })
      shadow.adoptedStyleSheets = [...shadow.adoptedStyleSheets, stylesheet]

      shadow.innerHTML = `
        <button class="remove-button">
          <svg class="remove-button__icon">
            <use xlink:href='/sprite.svg#sprite:close'></use>
          </svg>
        </button>

        <img class="image">
        <div class="content">
          <div class="name"></div>
          <div class="description"></div>
        </div>
        <div class="bottom">
          <e-product-button size="big"></e-product-button>
          <div class="price"></div>
        </div>
      `

      this.#removeButtonElement = shadow.querySelector('.remove-button')!
      this.#imageElement = shadow.querySelector('.image')!
      this.#nameElement = shadow.querySelector('.name')!
      this.#descriptionElement = shadow.querySelector('.description')!
      this.#productButtonElement = shadow.querySelector('e-product-button')!
      this.#priceElement = shadow.querySelector('.price')!

      this.#removeButtonElement.addEventListener('click', () => {
        basketStore.removeItem(this.pid)
      })

      this.#productButtonElement.addEventListener('productButtonCounterChange', (e) => {
        if (e.detail.counter) {
          basketStore.updateItem(this.#pid, e.detail.counter)
          this.#priceElement.textContent = numberToPrice(this.totalPrice)
        } else {
          basketStore.removeItem(this.#pid)
          this.#priceElement.textContent = ''
        }
      })
    }

    public get pid() {
      return this.#pid
    }

    public get productButtonElement() {
      return this.#productButtonElement
    }

    public get totalPrice() {
      return this.#price * this.#productButtonElement.counter
    }

    protected connectedCallback() {
      const pidAttr = this.getAttribute('pid') || 'unknown'
      const nameAttr = this.getAttribute('name') || ''
      const imageAttr = this.getAttribute('image') || ''
      const descriptionAttr = this.getAttribute('description') || ''
      const priceAttr = parseInt(this.getAttribute('price') || '0') || 0
      const amountAttr = parseInt(this.getAttribute('amount') || '1') || 1

      this.#pid = pidAttr
      this.#price = priceAttr

      this.#nameElement.textContent = nameAttr
      this.#imageElement.srcset = imageAttr
      this.#descriptionElement.textContent = descriptionAttr

      customElements.whenDefined('e-product-button').then(() => {
        if (this.isConnected) {
          this.#productButtonElement.set(amountAttr)
          this.#productButtonElement.setPlaceholder(numberToPrice(priceAttr))
        }
      })

      this.removeAttribute('pid')
      this.removeAttribute('name')
      this.removeAttribute('image')
      this.removeAttribute('description')
      this.removeAttribute('price')
      this.removeAttribute('amount')

      this.setAttribute('data-popover-content', '')
    }
  }

  if (!customElements.get('e-basket-item')) {
    customElements.define('e-basket-item', BasketItemElement)
  }

  declare global {
    interface HTMLElementTagNameMap {
      'e-basket-item': BasketItemElement
    }
  }
</script>
