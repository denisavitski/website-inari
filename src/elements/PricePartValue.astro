---
import type { PricePartValueType } from './PricePartValue.astro.0.mts'

export interface Props {
  class?: string
  font?: string
  type?: PricePartValueType
}

const { class: className, type = 'total', ...rest } = Astro.props
---

<e-price-part-value
  {...rest}
  class:list={[className]}
  type={type}
>
</e-price-part-value>

<script>
  import { basketStore } from '@stores/basketStore'
  import { deliveryZonesStore } from '@stores/deliveryZonesStore'
  import { orderStore } from '@stores/orderStore'
  import { numberToPrice } from '@utils/number'
  import { debounce } from 'aptechka/utils'

  export type PricePartValueType = 'discount' | 'delivery' | 'total' | 'products'

  export class PricePartElement extends HTMLElement {
    protected connectedCallback() {
      orderStore.subscribe(this.#storeChangeListener)
      basketStore.subscribe(this.#storeChangeListener)
    }

    protected disconnectedCallback() {
      orderStore.unsubscribe(this.#storeChangeListener)
      basketStore.unsubscribe(this.#storeChangeListener)
    }

    #storeChangeListener = debounce(() => {
      const type = this.getAttribute('type') as PricePartValueType

      if (type === 'discount') {
        this.textContent = `- ${numberToPrice(orderStore.discount)}`
      } else if (type === 'delivery') {
        this.textContent = orderStore.deliveryPrice
          ? numberToPrice(orderStore.deliveryPrice)
          : deliveryZonesStore.userZone
            ? 'Бесплатно'
            : ''
      } else if (type === 'products') {
        this.textContent = numberToPrice(basketStore.fullPrice)
      } else if (type === 'total') {
        this.textContent = numberToPrice(orderStore.finalPrice)
      }
    }, 10)
  }

  if (!customElements.get('e-price-part-value')) {
    customElements.define('e-price-part-value', PricePartElement)
  }

  declare global {
    interface HTMLElementTagNameMap {
      'e-price-part-value': PricePartElement
    }
  }
</script>
