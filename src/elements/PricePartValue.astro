---
import type { PricePartValueType } from './PricePartValue.astro.0.mts'

export interface Props {
  class?: string
  font?: string
  type?: PricePartValueType
  value?: string | number | undefined
}

const { class: className, type = 'final', value, ...rest } = Astro.props
---

<!-- Если не нужен функционал https://website-inari-git-modx-denisavitskis-projects.vercel.app/ui/elements/Dev
  можно замениь тег на любой другой
-->
<e-price-part-value
  {...rest}
  class:list={[className]}
  type={type}
  {value}
>
</e-price-part-value>

<script>
  import { globalStore } from '@stores/globalStore'
  import { numberToPrice } from '@utils/number'

  export type PricePartValueType = 'discount' | 'delivery' | 'final' | 'products'

  export class PricePartElement extends HTMLElement {
    protected connectedCallback() {
      globalStore.all.subscribe(this.#storeChangeListener)
    }

    protected disconnectedCallback() {
      globalStore.all.unsubscribe(this.#storeChangeListener)
    }

    #storeChangeListener = () => {
      const type = this.getAttribute('type') as PricePartValueType

      if (type === 'discount') {
        this.textContent = `- ${numberToPrice(globalStore.promocode.value?.discount || '0')}`
      } else if (type === 'delivery') {
        this.textContent = globalStore.deliveryPrice.value
          ? numberToPrice(globalStore.deliveryPrice.value)
          : globalStore.delivery.userZone
            ? 'Бесплатно'
            : ''
      } else if (type === 'products') {
        this.textContent = numberToPrice(globalStore.productsPrice.value)
      } else if (type === 'final') {
        this.textContent = numberToPrice(globalStore.finalPrice.value)
      }
    }
  }

  if (!customElements.get('e-price-part-value')) {
    customElements.define('e-price-part-value', PricePartElement)
  }

  declare global {
    interface HTMLElementTagNameMap {
      'e-price-part-value': PricePartElement
    }
  }
</script>
