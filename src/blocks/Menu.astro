---
import { productsData } from '@dev-data/productsData'
import Icon from '@elements/Icon.astro'
import MenuProduct, { type MenuProductData } from '@elements/MenuProduct.astro'
import RadioButton from '@elements/RadioButton.astro'

export interface MenuItem extends MenuProductData {
  categories: Array<string>
}

export interface Props {
  class?: string
  heading?: string
  items?: Array<MenuItem>
}

const {
  class: className,
  heading = 'Меню нашего ресторана',
  items = productsData,
  ...rest
} = Astro.props

const categories = new Map<string, Array<{ subcategories: Array<string>; name: string }>>()

items.forEach((item) => {
  item.categories.forEach((categoryName) => {
    let category = categories.get(categoryName)

    if (!category) {
      category = []
      categories.set(categoryName, category)
    }

    category.push({
      name: item.name,
      subcategories: item.subcategories || [],
    })
  })
})
---

<e-menu
  {...rest}
  class:list={['menu', className]}
  id="menu"
>
  <h2
    class="f-d-48-s f-m-24-s menu__heading"
    set:html={heading}
  />

  <div class="menu__main">
    <div class="menu__nav-col">
      <div class="menu__nav-wrapper">
        <e-popover-button
          class="menu__nav-button"
          target="menu-nav"
        >
          <Icon
            name="sticks"
            class="menu__nav-button__sticks"
          />
          <div
            class="f-m-16-s menu__nav-button__value"
            set:html={Array.from(categories)[0]?.[0]}
          />
          <Icon
            name="tailless-arrow"
            class="menu__nav-button__arrow"
          />
        </e-popover-button>

        <e-popover
          class="menu__nav-popover"
          id="menu-nav"
        >
          <e-input-group class="menu__nav">
            {
              Array.from(categories).map(([name], i) => {
                return (
                  <label class="menu__nav__item">
                    <input
                      type="radio"
                      name="menu-nav"
                      class="visually-hidden menu__nav__item__input"
                      value={name}
                      checked={i === 0}
                    />
                    <span class="menu__nav__item__value">
                      <Icon
                        name="sticks"
                        class="menu__nav__item__value__icon"
                      />
                      <span
                        class="f-d-24-s f-m-16-s menu__nav__item__value__name"
                        set:html={name}
                      />
                    </span>
                  </label>
                )
              })
            }
          </e-input-group>
        </e-popover>
      </div>
    </div>
    <div class="menu__content">
      <div class="menu__content__top">
        {
          Array.from(categories).map(([categoryName, items]) => {
            const subcategories = Array.from(
              new Set(
                items
                  .map((item) => {
                    return item.subcategories
                  })
                  .flat(),
              ),
            )

            subcategories.unshift('Все')

            return (
              <e-input-group class="menu__subcategory-input-group">
                {subcategories.map((subcategoryName, i) => {
                  return (
                    <RadioButton
                      font="f-d-16-s f-m-12-s menu__subcategory-input-group__item"
                      value={subcategoryName === 'Все' ? '' : subcategoryName}
                      checked={i === 0}
                      title={subcategoryName}
                      name={categoryName}
                      theme={'fill'}
                    />
                  )
                })}
              </e-input-group>
            )
          })
        }
      </div>
      <div class="menu__items">
        {
          items.map((item) => {
            return (
              <MenuProduct
                class="menu__item"
                {...item}
              />
            )
          })
        }
      </div>
    </div>
  </div>
</e-menu>

<style is:global>
  .menu {
    display: block;
    padding: var(--section-vertical-padding) var(--screen-horisontal-padding);
  }

  .menu__heading {
    margin-bottom: 5rem;

    @media (max-width: 768px) {
      margin-bottom: 2.4rem;
    }
  }

  .menu__main {
    width: 100%;
    display: grid;
    grid-template-columns: 31.5rem 1fr;
    gap: 4.8rem;

    @media (max-width: 768px) {
      grid-template-columns: 100%;
      gap: 1.6rem;
    }
  }

  .menu__nav-col {
    @media (max-width: 768px) {
      position: sticky;
      top: 0;

      z-index: 10;
    }
  }

  .menu__nav-wrapper {
    z-index: 10;

    @media (min-width: 769px) {
      position: sticky;
      top: calc(var(--header-height) / 2);
    }

    @media (max-width: 768px) {
      position: relative;
    }
  }

  .menu__nav-button {
    --type: toggle;

    @media (min-width: 769px) {
      display: none;
    }

    @media (max-width: 768px) {
      display: flex;
      align-items: center;
      justify-content: space-between;

      padding: 0.8rem;
      height: 4.3rem;

      border-radius: var(--border-radius-1);
      background-color: var(--color-secondary-2);

      transition: background-color var(--duration-button);

      user-select: none;

      &.opened {
        background-color: var(--color-primary-2);
      }
    }
  }

  .menu__nav-button__sticks {
    width: 2rem;
    height: 2.7rem;
    fill: var(--color-functional-1);
  }

  .menu__nav-button__value {
    color: var(--color-functional-1);

    @media (max-width: 768px) {
      transition: opacity var(--duration-button);

      .menu__nav-button.opened & {
        opacity: 0;
      }
    }
  }

  .menu__nav-button__arrow {
    width: 2.4rem;
    height: 2.4rem;

    fill: var(--color-functional-1);

    transform: scaleY(1) rotate(90deg);
    transition: transform var(--duration-button);

    .menu__nav-button.opened & {
      transform: scaleY(-1) rotate(90deg);
    }
  }

  .menu__nav-popover {
    --escape: true;
    --click-outside: true;

    @media (min-width: 769px) {
      opacity: 1 !important;
      display: block !important;
    }

    @media (max-width: 768px) {
      position: absolute;
      top: calc(100% + 0.8rem);
      left: 0;

      width: 100%;
      padding: 0 1.6rem;

      opacity: 1 !important;
      transition: opacity var(--duration-button);
    }
  }

  .menu__nav {
    display: grid;
    grid-auto-rows: max-content;
    gap: 2.4rem;

    @media (max-width: 768px) {
      gap: 1.2rem;
      padding: 1.6rem;

      background-color: var(--color-primary-2);
      border-radius: var(--border-radius-1);

      transition: clip-path var(--duration-button);
      clip-path: polygon(0 0, 100% 0, 100% 0, 0 0);

      .menu__nav-popover.opened & {
        clip-path: polygon(0 0, 100% 0, 100% 100%, 0% 100%);
      }
    }
  }

  .menu__nav__item {
    --sticks-width: 2.5rem;
    --sticks-margin: 1.2rem;
    --sticks-size: calc(var(--sticks-width) + var(--sticks-margin));

    position: relative;
    cursor: pointer;

    display: flex;
    align-items: center;

    overflow: hidden;

    @media (min-width: 769px) {
      height: 4.4rem;
    }
  }

  .menu__nav__item__input {
  }

  .menu__nav__item__value {
    display: flex;
    align-items: center;
  }

  .menu__nav__item__value__icon {
    width: var(--sticks-width);
    height: 100%;
    margin-right: var(--sticks-margin);

    fill: var(--color-functional-1);

    transform: translateX(calc(var(--sticks-size) * -1));
    transition: transform var(--duration-button);

    .menu__nav__item__input:checked ~ .menu__nav__item__value & {
      transform: translateX(0);
    }

    @media (max-width: 768px) {
      display: none;
    }
  }

  .menu__nav__item__value__name {
    transition:
      transform var(--duration-button),
      color var(--duration-button);

    @media (min-width: 769px) {
      transform: translateX(calc(var(--sticks-size) * -1));

      .menu__nav__item__input:checked ~ .menu__nav__item__value & {
        transform: translateX(0);
        color: var(--color-functional-1);
      }
    }

    @media (max-width: 768px) {
      color: var(--color-primary-1);

      .menu__nav__item__input:checked ~ .menu__nav__item__value & {
        color: var(--color-functional-1);
      }
    }
  }

  .menu__content {
    display: grid;
  }

  .menu__content__top {
  }

  .menu__subcategory-input-group {
    display: none;
    flex-wrap: wrap;
    gap: 0.8rem;
    margin-bottom: 1.6rem;

    &[aria-hidden='false'] {
      display: flex;
    }

    @media (max-width: 768px) {
      gap: 0.4rem;
    }
  }

  .menu__items {
    width: 100%;

    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1rem;

    @media (max-width: 768px) {
      grid-template-columns: 1fr 1fr;
    }

    @media (max-width: 600px) {
      grid-template-columns: 100%;
    }

    /*  */
  }

  .menu__item {
    .menu-product__card {
      display: none !important;
    }

    &[aria-hidden='false'] .menu-product__card {
      display: flex !important;
    }
  }
</style>

<script>
  import type { InputGroupElement } from '@lib/InputGroupElement'
  import type { PopoverElement } from 'aptechka/popover'
  import { scrollToElement } from 'aptechka/utils'

  export class MenuElement extends HTMLElement {
    #navPopoverElement: PopoverElement | null = null
    #navButtonValueElement: HTMLElement | null = null
    #categoryInputGroupElement: InputGroupElement | null = null
    #itemElements: Array<HTMLElement> = []
    #subcategoryInputGroupElements: Array<InputGroupElement> = []
    #currentSubcategoryInputGroupElement: InputGroupElement | null = null

    protected connectedCallback() {
      this.#navPopoverElement = this.querySelector('.menu__nav-popover')
      this.#navButtonValueElement = this.querySelector('.menu__nav-button__value')
      this.#categoryInputGroupElement = this.querySelector('.menu__nav')
      this.#itemElements = [...this.querySelectorAll<HTMLElement>('.menu__item')]
      this.#subcategoryInputGroupElements = [
        ...this.querySelectorAll<InputGroupElement>('.menu__subcategory-input-group'),
      ]

      this.#categoryInputGroupElement?.addEventListener(
        'inputGroupValueChange',
        this.#categoryChangeListener,
      )

      this.#subcategoryInputGroupElements.forEach((element) => {
        element.addEventListener('inputGroupValueChange', this.#subcategoryChangeListener)
      })

      Promise.all([
        customElements.whenDefined('e-popover'),
        customElements.whenDefined('e-input-group'),
      ]).then(() => {
        if (this.isConnected) {
          this.#changeCategory()
        }
      })
    }

    protected disconnectedCallback() {
      this.#categoryInputGroupElement?.removeEventListener(
        'inputGroupValueChange',
        this.#categoryChangeListener,
      )

      this.#subcategoryInputGroupElements.forEach((element) => {
        element.removeEventListener('inputGroupValueChange', this.#subcategoryChangeListener)
      })
    }

    #categoryChangeListener = () => {
      this.#changeCategory(true)
    }

    #subcategoryChangeListener = () => {
      this.#filterItems()
    }

    #changeCategory(scroll = false) {
      const categoryName = this.#categoryInputGroupElement?.value

      this.#currentSubcategoryInputGroupElement = null

      if (categoryName) {
        if (this.#navButtonValueElement) {
          this.#navButtonValueElement.textContent = categoryName
        }

        this.#currentSubcategoryInputGroupElement =
          this.#subcategoryInputGroupElements.find((el) => el.name === categoryName) || null

        this.#subcategoryInputGroupElements.forEach((element) => {
          if (element.name === categoryName) {
            this.#currentSubcategoryInputGroupElement = element
            element.ariaHidden = 'false'
          } else {
            element.ariaHidden = 'true'
          }
        })
      }

      this.#filterItems()
      this.#subcategoryChangeListener()
      this.#navPopoverElement?.close()

      if (scroll) {
        scrollToElement(this, { offset: '.header', behavior: 'smooth' })
      }
    }

    #filterItems() {
      const categoryName = this.#categoryInputGroupElement?.value
      const subcategoryName = this.#currentSubcategoryInputGroupElement?.value

      this.#itemElements.forEach((element) => {
        const categories = element
          .getAttribute('data-categories')
          ?.split(',')
          .map((v) => v.trim())

        const subcategories = element
          .getAttribute('data-subcategories')
          ?.split(',')
          .map((v) => v.trim())

        let errors = 0

        if (categoryName && !categories?.find((c) => c === categoryName)) {
          errors++
        }

        if (subcategoryName && !subcategories?.find((s) => s === subcategoryName)) {
          errors++
        }

        element.ariaHidden = errors ? 'true' : 'false'
      })
    }
  }

  if (!customElements.get('e-menu')) {
    customElements.define('e-menu', MenuElement)
  }

  declare global {
    interface HTMLElementTagNameMap {
      'e-menu': MenuElement
    }
  }
</script>
