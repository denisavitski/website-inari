---
import Button from '@elements/Button.astro'
import OrderForm from '@elements/OrderForm.astro'
import OrderContents from '@elements/OrderContents.astro'
import OrderTypeToggle from '@elements/OrderTypeToggle.astro'
---

<e-order class="order">
  <div class="order__start">
    <h1
      class="f-d-48-s f-m-18-s order__heading"
      set:html={'Оформление заказа'}
    />

    <OrderTypeToggle class="order__type" />

    <div class="order__flex">
      <OrderForm class="order__delivery-form" />
      <OrderForm
        class="order__pickup-form"
        type={'pickup'}
      />
      <OrderContents class="order__contents" />
    </div>
  </div>
  <div class="order__complete">
    <h2
      class="f-d-48-s f-m-18-s order__complete__heading"
      set:html="Ваш заказ успешно принят!"
    />
    <p
      class="f-d-24-s f-m-14-s order__complete__description"
      set:html="Пожалуйста, ожидайте доставку"
    />
    <Button href="/">На главную Инари</Button>
  </div>
</e-order>

<style is:global>
  .order {
    --gap: 1rem;

    display: block;

    padding: 0 var(--screen-horisontal-padding);
    padding-top: 3.2rem;
    padding-bottom: 15rem;

    @media (max-width: 768px) {
      --gap: 0.8rem;
      padding-top: 2.4rem;
      padding-bottom: 12rem;
    }
  }

  .order__start {
    .order.complete & {
      display: none;
    }
  }

  .order__heading {
    margin-bottom: 3.2rem;

    @media (max-width: 768px) {
      margin-bottom: 1.6rem;
    }
  }

  .order__type {
    display: flex;
    gap: 1rem;

    margin-bottom: 2.4rem;

    @media (max-width: 768px) {
      margin-bottom: 1.2rem;
    }
  }

  .order__flex {
    display: flex;
    gap: 7.9rem;

    @media (max-width: 768px) {
      flex-direction: column-reverse;
      gap: 1.6rem;
    }
  }

  .order__delivery-form {
    [data-order-type='pickup'] & {
      display: none;
    }
  }

  .order__pickup-form {
    [data-order-type='delivery'] & {
      display: none;
    }
  }

  /*
  --------------
  END
  --------------
  */

  .order__complete {
    display: none;

    .order.complete & {
      display: block;
    }
  }

  .order__complete__heading {
    display: block;
    margin-bottom: 0.8rem;
    text-align: center;

    @media (max-width: 768px) {
      margin-bottom: 0.4rem;
    }
  }

  .order__complete__description {
    display: block;
    text-align: center;
    margin-bottom: 4rem;

    @media (max-width: 768px) {
      margin-bottom: 2.4rem;
    }
  }
</style>

<script>
  import { basketStore, type BasketStoreItem } from '@stores/basketStore'
  import { orderStore } from '@stores/orderStore'
  import { numberToPrice } from '@utils/number'

  class OrderProduct {
    #element: HTMLElement
    #amountElement: HTMLElement
    #priceElement: HTMLElement

    #pid: string
    #price: number
    #amount: number

    constructor(data: BasketStoreItem) {
      this.#element = document.createElement('li')
      this.#element.className = 'order__product'

      this.#element.innerHTML = `
        <div class="order__product__title">${data.name}</div>
        <div class="order__product__amount"></div>
        <div class="order__product__price"></div>
      `

      this.#amountElement = this.#element.querySelector('.order__product__amount')!
      this.#priceElement = this.#element.querySelector('.order__product__price')!

      this.#pid = data.pid
      this.#price = data.price
      this.#amount = data.amount

      this.setAmount(this.#amount)
    }

    public get element() {
      return this.#element
    }

    public get pid() {
      return this.#pid
    }

    public get price() {
      return this.#price
    }

    public get totalPrice() {
      return this.#price * this.#amount
    }

    public get amount() {
      return this.#amount
    }

    public setAmount(number: number) {
      this.#amount = number
      this.#amountElement.textContent = this.#amount.toString()
      this.#priceElement.textContent = numberToPrice(this.#amount * this.#price)
    }
  }

  export class OrderElement extends HTMLElement {
    #totalPriceElements: Array<HTMLElement> = []

    #productsPriceElements: Array<HTMLElement> = []

    #deliverPriceContainerElements: Array<HTMLElement> = []
    #deliveryPriceElements: Array<HTMLElement> = []

    #discountPriceContainerElements: Array<HTMLElement> = []
    #discountPriceElements: Array<HTMLElement> = []

    #productsContainerElement: HTMLElement | null = null

    #products: Array<OrderProduct> = []

    protected connectedCallback() {
      // if (!basketStore.items.length) {
      //   morph.navigate('/')
      // }

      this.#totalPriceElements = [...this.querySelectorAll<HTMLElement>('[data-total-price]')]

      this.#productsPriceElements = [...this.querySelectorAll<HTMLElement>('[data-products-price]')]

      this.#deliverPriceContainerElements = [
        ...this.querySelectorAll<HTMLElement>('[data-delivery-price-container]'),
      ]
      this.#deliveryPriceElements = [...this.querySelectorAll<HTMLElement>('[data-delivery-price]')]

      this.#discountPriceContainerElements = [
        ...this.querySelectorAll<HTMLElement>('[data-discount-price-container]'),
      ]
      this.#discountPriceElements = [...this.querySelectorAll<HTMLElement>('[data-discount-price]')]

      this.#productsContainerElement = this.querySelector('.order__products')

      basketStore.subscribe(this.#basketStoreChangeListener)
      orderStore.subscribe(this.#orderStoreChangeListener)
    }

    protected disconnectedCallback() {
      basketStore.unsubscribe(this.#basketStoreChangeListener)
      orderStore.unsubscribe(this.#orderStoreChangeListener)
    }

    #orderStoreChangeListener = () => {
      if (orderStore.type === 'pickup') {
        this.#deliverPriceContainerElements.forEach((element) => {
          element.style.display = 'none'
        })
      } else {
        this.#deliverPriceContainerElements.forEach((element) => {
          element.style.display = ''
        })
      }

      if (!orderStore.discount) {
        this.#discountPriceContainerElements.forEach((element) => {
          element.style.display = 'none'
        })

        this.#discountPriceElements.forEach((element) => {
          element.textContent = numberToPrice(0)
        })
      } else {
        this.#discountPriceContainerElements.forEach((element) => {
          element.style.display = ''
        })

        this.#discountPriceElements.forEach((element) => {
          element.textContent = numberToPrice(orderStore.discount)
        })
      }
    }

    #basketStoreChangeListener = () => {
      basketStore.items.forEach((item) => {
        let product = this.#products.find((product) => product.pid === item.pid)

        if (!product) {
          product = new OrderProduct(item)
          this.#productsContainerElement?.appendChild(product.element)
          this.#products.push(product)
        } else {
          product.setAmount(item.amount)
        }
      })

      this.#products = this.#products.filter((product) => {
        const item = basketStore.items.find((item) => item.pid === product.pid)

        if (!item) {
          product.element.remove()
          return false
        }

        return true
      })

      this.#productsPriceElements.forEach((element) => {
        element.textContent = numberToPrice(basketStore.fullPrice)
      })

      this.#deliveryPriceElements.forEach((element) => {
        element.textContent = numberToPrice(0)
      })

      this.#totalPriceElements.forEach((element) => {
        element.textContent = numberToPrice(0)
      })
    }
  }

  if (!customElements.get('e-order')) {
    customElements.define('e-order', OrderElement)
  }

  declare global {
    interface HTMLElementTagNameMap {
      'e-order': OrderElement
    }
  }
</script>
