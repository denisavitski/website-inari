---
import Button from '@elements/Button.astro'
import OrderForm from '@elements/OrderForm.astro'
import OrderContents from '@elements/OrderContents.astro'
import OrderTypeToggle from '@elements/OrderTypeToggle.astro'
import OrderCalendar from '@elements/OrderCalendar.astro'
---

<e-order class="order">
  <div class="order__start">
    <h1
      class="f-d-48-s f-m-18-s order__heading"
      set:html={'Оформление заказа'}
    />

    <OrderTypeToggle class="order__type" />

    <div class="order__flex">
      <OrderForm class="order__delivery-form" />
      <OrderForm
        class="order__pickup-form"
        type={'pickup'}
      />
      <OrderContents class="order__contents" />
    </div>
  </div>
  <div class="order__result order__result_pending">
    <h2
      class="f-d-48-s f-m-18-s order__result__heading"
      set:html="Ваш заказ проходит обработку"
    />
    <p
      class="f-d-24-s f-m-14-s order__result__description"
      set:html="Пожалуйста, ожидайте"
    />
  </div>
  <div class="order__result order__result_success">
    <h2
      class="f-d-48-s f-m-18-s order__result__heading"
      set:html="Ваш заказ успешно принят!"
    />
    <p
      class="f-d-24-s f-m-14-s order__result__description"
      set:html="Пожалуйста, ожидайте доставку"
    />
    <Button href="/">На главную Инари</Button>
  </div>
  <div class="order__result order__result_error">
    <h2
      class="f-d-48-s f-m-18-s order__result__heading"
      set:html={`К сожалению, Ваш заказ обработать не&nbsp;удалось`}
    />
    <p
      class="f-d-24-s f-m-14-s order__result__description"
      set:html={`Попробуйте повторить попытку позже, либо совершите заказ по&nbsp;нашему телефону <a href="tel:+ 7 (921) 999-84-22">+&nbsp;7&nbsp;(921)&nbsp;999-84-22</a>`}
    />
    <Button href="/">На главную Инари</Button>
  </div>
  <OrderCalendar />
</e-order>

<style is:global>
  .order {
    --gap: 1rem;

    display: block;

    padding: 0 var(--screen-horisontal-padding);
    padding-top: 3.2rem;
    padding-bottom: 15rem;

    @media (max-width: 768px) {
      --gap: 0.8rem;
      padding-top: 2.4rem;
      padding-bottom: 12rem;
    }
  }

  .order__start {
    .order.success &,
    .order.error &,
    .order.pending & {
      display: none;
    }
  }

  .order__heading {
    margin-bottom: 3.2rem;

    @media (max-width: 768px) {
      margin-bottom: 1.6rem;
    }
  }

  .order__type {
    display: flex;
    gap: 1rem;

    margin-bottom: 2.4rem;

    @media (max-width: 768px) {
      margin-bottom: 1.2rem;
    }
  }

  .order__flex {
    display: flex;
    gap: 7.9rem;

    @media (max-width: 768px) {
      flex-direction: column-reverse;
      gap: 1.6rem;
    }
  }

  .order__delivery-form {
    [data-order-type='pickup'] & {
      display: none;
    }
  }

  .order__pickup-form {
    [data-order-type='delivery'] & {
      display: none;
    }
  }

  /*
  --------------
  END
  --------------
  */

  .order__result {
    --height: 4.3rem;

    display: none;
    flex-direction: column;
    align-items: center;
    justify-content: center;

    width: 90rem;
    height: 72.8rem;
    margin: 0 auto;

    @media (max-width: 768px) {
      width: 100%;
      height: 30rem;
    }
  }

  .order__result_pending {
    .order.pending & {
      display: flex;
    }
  }

  .order__result_success {
    .order.success & {
      display: flex;
    }
  }

  .order__result_error {
    .order.error & {
      display: flex;
    }
  }

  .order__result__heading {
    display: block;
    margin-bottom: 0.8rem;
    text-align: center;

    @media (max-width: 768px) {
      margin-bottom: 0.4rem;
    }
  }

  .order__result__description {
    display: block;
    text-align: center;
    margin-bottom: 4rem;

    @media (max-width: 768px) {
      margin-bottom: 2.4rem;
    }

    a {
      color: var(--color-primary-3);
    }
  }
</style>

<script>
  import type { CalendarElement } from '@elements/Calendar.astro.0.mjs'
  import type { FormElement } from '@elements/Form.astro.0.mjs'
  import type { InputGroupElement, InputGroupEvents } from '@lib/InputGroupElement'
  import { globalStore } from '@stores/globalStore'
  import { ClassLinkedStatus } from 'aptechka/class-linked-status'
  import type { PopoverElement } from 'aptechka/popover'

  export class OrderElement extends HTMLElement {
    #formElements: Array<FormElement> = []

    #timeGroupElements: Array<InputGroupElement> = []

    #customDateInputElements: Array<HTMLInputElement> = []

    #calendarModalElement: PopoverElement | null = null
    #calendarElement: CalendarElement | null = null

    #status = new ClassLinkedStatus(this, { success: false, error: false, pending: false })

    protected connectedCallback() {
      document.documentElement.classList.add('order-page')

      this.#formElements = [...this.querySelectorAll('e-form')]
      this.#formElements.forEach((element) => {
        element.addEventListener('formSubmit', this.#formSubmitListener)
        element.addEventListener('formSuccess', this.#formSuccessListener)
        element.addEventListener('formError', this.#formErrorListener)
      })

      this.#timeGroupElements = [...this.querySelectorAll<InputGroupElement>('.order-form__time')]

      this.#timeGroupElements.forEach((element) => {
        element.addEventListener('inputGroupValueChange', this.#timeChangeListener)
      })

      this.#customDateInputElements = [
        ...this.querySelectorAll<HTMLInputElement>('[data-custom-date]'),
      ]

      this.#customDateInputElements.forEach((el) => {
        el.addEventListener('click', this.#customDateClickListener)
      })

      this.#calendarModalElement = this.querySelector('#order-calendar')

      this.#calendarElement = this.querySelector('e-calendar')
      this.#calendarElement?.addEventListener('calendarPick', this.#calendarPickListener)
    }

    protected disconnectedCallback() {
      document.documentElement.classList.remove('order-page')

      this.#formElements.forEach((element) => {
        element.removeEventListener('formSubmit', this.#formSubmitListener)
        element.removeEventListener('formSuccess', this.#formSuccessListener)
        element.removeEventListener('formError', this.#formErrorListener)
      })

      this.#timeGroupElements.forEach((element) => {
        element.removeEventListener('inputGroupValueChange', this.#timeChangeListener)
      })

      this.#customDateInputElements.forEach((el) => {
        el.removeEventListener('click', this.#customDateClickListener)
      })

      this.#calendarElement?.removeEventListener('calendarPick', this.#calendarPickListener)

      this.#status.close()

      globalStore.orderStep.value = 'basket'
    }

    #customDateClickListener = () => {
      this.#calendarModalElement?.open()
    }

    #timeChangeListener = (e: InputGroupEvents['inputGroupValueChange']) => {
      const ct = e.currentTarget as InputGroupElement

      if (ct.input?.hasAttribute('data-custom-date')) {
        this.#calendarModalElement?.open()
      }
    }

    #calendarPickListener = () => {
      const d = this.#calendarElement!.pickedDate

      const dateString = `${d.day}-${d.month}-${d.year} ${d.hours}`

      this.#customDateInputElements.forEach((el) => {
        el.setAttribute('value', dateString)
      })
    }

    #formSubmitListener = () => {
      globalStore.orderStep.value = 'order'
      this.#status.set('success', false)
      this.#status.set('error', false)
      this.#status.set('pending', true)

      document.querySelector('#page-scroll')?.scroll({
        top: 0,
        behavior: 'instant',
      })
    }

    #formSuccessListener = () => {
      globalStore.orderStep.value = 'complete'

      this.#status.set('pending', false)
      this.#status.set('success', true)

      document.querySelector('#page-scroll')?.scroll({
        top: 0,
        behavior: 'instant',
      })
    }

    #formErrorListener = () => {
      this.#status.set('pending', false)
      this.#status.set('error', true)

      document.querySelector('#page-scroll')?.scroll({
        top: 0,
        behavior: 'instant',
      })
    }
  }

  if (!customElements.get('e-order')) {
    customElements.define('e-order', OrderElement)
  }

  declare global {
    interface HTMLElementTagNameMap {
      'e-order': OrderElement
    }
  }
</script>
